Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force

function Get-SystemInfo {
    param ($Server)

    $systemInfo = @{}
    try {
        $osInfo = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $Server
        $biosInfo = Get-WmiObject -Class Win32_BIOS -ComputerName $Server
        $csInfo = Get-WmiObject -Class Win32_ComputerSystem -ComputerName $Server
        $cpuInfo = Get-WmiObject -Class Win32_Processor -ComputerName $Server

        $systemInfo["OS Name"] = $osInfo.Caption
        $systemInfo["Version"] = $osInfo.Version
        $systemInfo["Manufacturer"] = $osInfo.Manufacturer
        $systemInfo["Configuration"] = $osInfo.CSName
        $systemInfo["Build Type"] = $osInfo.BuildType
        $systemInfo["Registered Owner"] = $osInfo.RegisteredUser
        $systemInfo["Registered Organization"] = $osInfo.Organization
        $systemInfo["Product ID"] = $osInfo.SerialNumber
        $systemInfo["Original Install Date"] = $osInfo.InstallDate
        $systemInfo["System Boot Time"] = $osInfo.LastBootUpTime
        $systemInfo["System Manufacturer"] = $csInfo.Manufacturer
        $systemInfo["System Model"] = $csInfo.Model
        $systemInfo["System Type"] = $osInfo.OSArchitecture
        $systemInfo["Processor(s)"] = ($cpuInfo.Name | Out-String).Trim()
        $systemInfo["BIOS Version"] = $biosInfo.SMBIOSBIOSVersion
        $systemInfo["Windows Directory"] = $osInfo.WindowsDirectory
        $systemInfo["System Directory"] = $osInfo.SystemDirectory
        $systemInfo["Boot Device"] = $osInfo.BootDevice
        $systemInfo["System Locale"] = $osInfo.MUILanguages -join ", "
        $systemInfo["Input Locale"] = $osInfo.Locale
        $systemInfo["Time Zone"] = $osInfo.CurrentTimeZone
        $systemInfo["Total Physical Memory"] = [math]::Round($csInfo.TotalPhysicalMemory / 1GB, 2).ToString() + " GB"
        $systemInfo["Available Physical Memory"] = [math]::Round($osInfo.FreePhysicalMemory / 1MB, 2).ToString() + " GB"
        $systemInfo["Virtual Memory: Max Size"] = [math]::Round($osInfo.TotalVirtualMemorySize / 1MB, 2).ToString() + " GB"
        $systemInfo["Virtual Memory: Available"] = [math]::Round($osInfo.FreeVirtualMemory / 1MB, 2).ToString() + " GB"
    } catch {
        Write-Warning "Error retrieving system info for ${Server}: $($_.Exception.Message)"
    }

    $systemInfo
}

function Get-DiskInfo {
    param ($Server)
    Get-WmiObject -Class Win32_LogicalDisk -ComputerName $Server -Filter "DriveType=3" |
    Select-Object DeviceID, @{Name="FreeSpace(GB)"; Expression={[math]::Round($_.FreeSpace/1GB, 2)}}, 
                  @{Name="TotalSpace(GB)"; Expression={[math]::Round($_.Size/1GB, 2)}}
}

function Get-NetworkInfo {
    param ($Server)
    Get-WmiObject -Class Win32_NetworkAdapterConfiguration -ComputerName $Server -Filter "IPEnabled=True" |
    Select-Object Description, IPAddress, MACAddress, DefaultIPGateway, DNSDomain, @{Name="Status"; Expression={if ($_.IPEnabled) {"Enabled"} else {"Disabled"}}}
}

$form = New-Object System.Windows.Forms.Form
$form.Text = "Remote Server Information Tool"
$form.Size = New-Object System.Drawing.Size(800, 600)
$form.StartPosition = "CenterScreen"
$form.BackColor = [System.Drawing.Color]::FromArgb(240, 240, 240)

$titleLabel = New-Object System.Windows.Forms.Label
$titleLabel.Text = "Remote Server Management"
$titleLabel.Font = New-Object System.Drawing.Font("Arial", 14, [System.Drawing.FontStyle]::Bold)
$titleLabel.AutoSize = $true
$titleLabel.Location = New-Object System.Drawing.Point(20, 10)
$form.Controls.Add($titleLabel)

$serverLabel = New-Object System.Windows.Forms.Label
$serverLabel.Text = "Server Name/IP:"
$serverLabel.Location = New-Object System.Drawing.Point(20, 50)
$serverLabel.AutoSize = $true
$form.Controls.Add($serverLabel)

$serverInput = New-Object System.Windows.Forms.TextBox
$serverInput.Location = New-Object System.Drawing.Point(150, 48)
$serverInput.Width = 500
$form.Controls.Add($serverInput)

$executeButton = New-Object System.Windows.Forms.Button
$executeButton.Text = "Get Info"
$executeButton.Location = New-Object System.Drawing.Point(670, 46)
$executeButton.Size = New-Object System.Drawing.Size(75, 25)
$form.Controls.Add($executeButton)

$fileLabel = New-Object System.Windows.Forms.Label
$fileLabel.Text = "Upload Server List (txt):"
$fileLabel.Location = New-Object System.Drawing.Point(20, 90)
$fileLabel.AutoSize = $true
$form.Controls.Add($fileLabel)

$fileInput = New-Object System.Windows.Forms.TextBox
$fileInput.Location = New-Object System.Drawing.Point(200, 88)
$fileInput.Width = 400
$form.Controls.Add($fileInput)

$fileBrowse = New-Object System.Windows.Forms.Button
$fileBrowse.Text = "Browse"
$fileBrowse.Location = New-Object System.Drawing.Point(610, 86)
$fileBrowse.Size = New-Object System.Drawing.Size(75, 25)
$fileBrowse.Add_Click({
    $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
    $openFileDialog.Filter = "Text files (*.txt)|*.txt"
    if ($openFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
        $fileInput.Text = $openFileDialog.FileName
    }
})
$form.Controls.Add($fileBrowse)

$executeMultiButton = New-Object System.Windows.Forms.Button
$executeMultiButton.Text = "Get Info"
$executeMultiButton.Location = New-Object System.Drawing.Point(700, 86)
$executeMultiButton.Size = New-Object System.Drawing.Size(75, 25)
$form.Controls.Add($executeMultiButton)

$resultsLabel = New-Object System.Windows.Forms.Label
$resultsLabel.Text = "Results:"
$resultsLabel.Font = New-Object System.Drawing.Font("Arial", 10, [System.Drawing.FontStyle]::Bold)
$resultsLabel.Location = New-Object System.Drawing.Point(20, 130)
$resultsLabel.AutoSize = $true
$form.Controls.Add($resultsLabel)

$resultsBox = New-Object System.Windows.Forms.TextBox
$resultsBox.Multiline = $true
$resultsBox.ScrollBars = "Vertical"
$resultsBox.Location = New-Object System.Drawing.Point(20, 160)
$resultsBox.Size = New-Object System.Drawing.Size(750, 380)
$form.Controls.Add($resultsBox)

$executeButton.Add_Click({
    $server = $serverInput.Text
    if ([string]::IsNullOrWhiteSpace($server)) {
        [System.Windows.Forms.MessageBox]::Show("Please enter a server name or IP.")
        return
    }
    $resultsBox.Clear()
    try {
        $systemInfo = Get-SystemInfo -Server $server | Format-Table -AutoSize | Out-String
        $diskInfo = Get-DiskInfo -Server $server | Format-Table -AutoSize | Out-String
        $networkInfo = Get-NetworkInfo -Server $server | Format-Table -AutoSize | Out-String
        $resultsBox.AppendText("System Information:`n$systemInfo`n")
        $resultsBox.AppendText("Disk Information:`n$diskInfo`n")
        $resultsBox.AppendText("Network Information:`n$networkInfo`n")
    } catch {
        $resultsBox.AppendText("Error retrieving information for ${server}: ${_}`n")
    }
})

$executeMultiButton.Add_Click({
    $file = $fileInput.Text
    if ([string]::IsNullOrWhiteSpace($file)) {
        [System.Windows.Forms.MessageBox]::Show("Please upload a file with server list.")
        return
    }
    $resultsBox.Clear()
    try {
        $servers = Get-Content -Path $file
        foreach ($server in $servers) {
            $systemInfo = Get-SystemInfo -Server $server
            $resultsBox.AppendText("System Information for ${server}:`n")
            foreach ($key in $systemInfo.Keys) {
                $resultsBox.AppendText("${key}: ${($systemInfo[$key])}`n")
            }
        }
    } catch {
        $resultsBox.AppendText("Error retrieving information from file: $($_.Exception.Message)`n")
    }
})

[void] $form.ShowDialog()
